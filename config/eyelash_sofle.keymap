#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <100>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 32 58 19 45 6>;
        hold-trigger-on-release;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 2 3 4 5 6 13 14 15 16 17 18 19 26 27 28 29 30 31 32 39 40 41 42 43 44 45 52 53 54 55 56 57 58>;
        hold-trigger-on-release;
        tapping-term-ms = <200>;
        quick-tap-ms = <120>;
        flavor = "tap-preferred";
    };

    OSM: OSM {
        compatible = "zmk,behavior-sticky-key";
        label = "OSM";
        bindings = <&kp>;
        #binding-cells = <1>;
        release-after-ms = <200>;
        quick-release;
    };

    tdh: tdh {
        compatible = "zmk,behavior-hold-tap";
        label = "TDH";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <350>;
        require-prior-idle-ms = <50>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
    };

    combos {
        compatible = "zmk,combos";

        mt_equal {
            bindings = <&mt PLUS EQUAL>;
            key-positions = <11 12>;
            layers = <0>;
        };

        mt_minus {
            bindings = <&mt UNDERSCORE MINUS>;
            key-positions = <11 10>;
            layers = <0>;
        };

        backtick {
            bindings = <&kp GRAVE>;
            key-positions = <1 0>;
            layers = <0>;
        };
    };

    behaviors {
    };

    macros {
        ide_refactor: ide_refactor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(R))>;
            label = "IDE_REFACTOR";
        };

        ide_kill_node: ide_kill_node {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "IDE_KILL_NODE";
        };

        voice_over: voice_over {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(F5)>;
            label = "VOICE_OVER";
        };

        ide_source_control: ide_soure {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(G))>;
            label = "IDE_SOURE";
        };

        ide_open_terminal: ide_open_terminal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(GRAVE)>;
            label = "IDE_OPEN_TERMINAL";
        };

        ide_open_references: ide_open_references {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(F12))>;
            label = "IDE_OPEN_REFERENCES";
        };

        open_raycast: open_raycast {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE)>;
            label = "OPEN_RAYCAST";
        };

        open_gpt: open_gpt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(SPACE))>;
            label = "OPEN_GPT";
        };

        ide_logging: ide_logging {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp O &kp L &kp E &kp DOT &kp L &kp O &kp G &kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "IDE_LOGGING";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESCAPE      &hml EXCL NUMBER_1  &hml AT_SIGN NUMBER_2  &hml HASH NUMBER_3  &hml DOLLAR NUMBER_4  &hml PERCENT N5    &kp UP_ARROW     &hmr CARET NUMBER_6  &hmr AMPERSAND N7  &hmr ASTERISK N8       &hmr LEFT_PARENTHESIS N9  &hmr RIGHT_PARENTHESIS N0  &kp BACKSPACE
&kp TAB         &kp Q               &kp W                  &kp E               &kp R                 &kp T              &kp DOWN_ARROW   &kp Y                &kp U              &kp I                  &kp O                     &kp P                      &mt PIPE BACKSLASH
&kp CAPS        &kp A               &kp S                  &kp D               &kp F                 &kp G              &kp LEFT_ARROW   &kp H                &kp J              &kp K                  &kp L                     &mt COLON SEMI             &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z               &kp X                  &kp C               &kp V                 &kp B              &kp RIGHT_ARROW  &kp N                &kp M              &mt LESS_THAN COMMA    &mt GREATER_THAN DOT      &mt QUESTION FSLH          &kp RET
&kp C_MUTE      &kp LCTRL           &kp LEFT_ALT           &kp LEFT_GUI        &lt 1 SPACE           &lt 2 SPACE        &kp ENTER        &tog 1               &kp B              &mt PAGE_UP PAGE_DOWN  &open_gpt                 &open_raycast
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans          &trans              &kp F2     &kp F12         &ide_open_references  &voice_over            &mmv MOVE_UP     &trans          &trans          &trans          &trans           &trans  &trans
&trans          &trans              &trans     &trans          &ide_refactor         &ide_open_terminal     &mmv MOVE_DOWN   &trans          &msc SCRL_UP    &msc SCRL_DOWN  &trans           &trans  &trans
&trans          &ide_open_terminal  &mkp LCLK  &mkp MCLK       &mkp RCLK             &ide_source_control    &mmv MOVE_LEFT   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans  &trans
&trans          &trans              &trans     &ide_kill_node  &kp LS(LEFT_ALT)      &kp LS(LEFT_GUI)       &mmv MOVE_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  &trans  &trans
&bt BT_CLR_ALL  &trans              &trans     &trans          &trans                &trans                 &mkp LCLK        &trans          &trans          &trans          &trans           &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans                &trans          &trans              &trans  &trans             &trans           &trans                 &trans  &trans            &trans
&trans  &trans  &trans  &trans                &trans          &trans              &trans  &kp GRAVE          &kp TILDE        &trans                 &trans  &trans            &trans
&trans  &trans  &trans  &trans                &kp GRAVE       &kp UNDERSCORE      &trans  &kp MINUS          &kp PLUS         &kp EQUAL              &trans  &kp LEFT_BRACE    &kp RIGHT_BRACE
&trans  &trans  &trans  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp LEFT_BRACKET    &trans  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans  &trans  &trans  &trans                &trans          &trans              &trans  &trans             &trans           &trans                 &trans  &trans
            >;
        };
    };
};
