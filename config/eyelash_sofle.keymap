#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <130>;
        flavor = "tap-preferred";
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 32 58 19 45 6>;
        hold-trigger-on-release;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        hold-trigger-key-positions = <0 1 2 3 4 5 6 13 14 15 16 17 18 19 26 27 28 29 30 31 32 39 40 41 42 43 44 45 52 53 54 55 56 57 58>;
        hold-trigger-on-release;
        tapping-term-ms = <200>;
        quick-tap-ms = <135>;
        flavor = "tap-preferred";
    };

    td_shift_1: td_shift_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_1";
        #binding-cells = <0>;
        bindings = <&kp NUMBER_1>, <&kp EXCLAMATION>;

        tapping-term-ms = <200>;
    };

    td_shift_2: td_shift_2 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_2";
        #binding-cells = <0>;
        bindings = <&kp NUMBER_2>, <&kp AT_SIGN>;
    };

    td_shift_3: td_shift_3 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_3";
        #binding-cells = <0>;
        bindings = <&kp NUMBER_3>, <&kp HASH>;
    };

    td_shift_4: td_shift_4 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_4";
        #binding-cells = <0>;
        bindings = <&kp NUMBER_4>, <&kp DOLLAR>;
    };

    td_shift_6: td_shift_6 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_6";
        #binding-cells = <0>;
        bindings = <&kp NUMBER_6>, <&kp CARET>;
    };

    td_shift_5: td_shift_5 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_5";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp PERCENT>;
    };

    td_shift_7: td_shift_7 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_7";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp AMPERSAND>;
    };

    td_shift_8: td_shift_8 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_8";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp ASTERISK>;
    };

    td_shift_9: td_shift_9 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_9";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp LEFT_PARENTHESIS>;
    };

    td_shift_0: td_shift_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_0";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp RIGHT_PARENTHESIS>;
    };

    td_shift_dash: td_shift_dash {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_DASH";
        #binding-cells = <0>;
        bindings = <&kp MINUS>, <&kp UNDERSCORE>;
    };

    td_shift_equal: td_shift_equal {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_EQUAL";
        #binding-cells = <0>;
        bindings = <&kp EQUAL>, <&kp PLUS>;
    };

    td_shift_grave: td_shift_grave {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_SHIFT_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp GRAVE>, <&kp TILDE>;
    };

    td_backspace: td_backspace {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_BACKSPACE";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
    };

    OSM: OSM {
        compatible = "zmk,behavior-sticky-key";
        label = "OSM";
        bindings = <&kp>;
        #binding-cells = <1>;
        release-after-ms = <200>;
        quick-release;
    };

    td_bracket_left: td_bracket_left {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_BRACKET_LEFT";
        #binding-cells = <0>;
        bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;
    };

    td_bracket_right: td_bracket_right {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_BRACKET_RIGHT";
        #binding-cells = <0>;
        bindings =
            <&kp RIGHT_PARENTHESIS>,
            <&kp RIGHT_BRACE>,
            <&kp RIGHT_BRACKET>;
    };

    td_refresh: td_refresh {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_REFRESH";
        #binding-cells = <0>;
        bindings = <&kp F5>, <&hard_refresh>;
    };

    combos {
        compatible = "zmk,combos";

        quest_mark {
            bindings = <&kp QUESTION>;
            key-positions = <37 38>;
            layers = <0>;
        };

        exc_mark {
            bindings = <&kp EXCL>;
            key-positions = <0 13>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <36 37 35>;
            layers = <0>;
            timeout-ms = <200>;
        };

        undo {
            bindings = <&undo>;
            key-positions = <40 41>;
            layers = <0>;
        };

        cut {
            bindings = <&cut>;
            key-positions = <41 42>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        copy {
            bindings = <&copy>;
            key-positions = <42 43>;
            layers = <0>;
        };

        paste {
            bindings = <&paste>;
            key-positions = <43 44>;
            layers = <0>;
        };

        td_equal {
            bindings = <&td_shift_equal>;
            key-positions = <11 12>;
            layers = <0>;
        };

        td_minus {
            bindings = <&td_shift_dash>;
            key-positions = <11 10>;
            layers = <0>;
        };

        td_brackets_left {
            bindings = <&td_bracket_left>;
            key-positions = <13 14>;
        };

        td_brackets_right {
            bindings = <&td_bracket_right>;
            key-positions = <24 25>;
        };

        refresh {
            bindings = <&td_refresh>;
            key-positions = <4 5>;
        };

        td_grave {
            bindings = <&td_shift_grave>;
            key-positions = <0 1>;
        };
    };

    behaviors {
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp V>;
            label = "PASTE";
        };

        undo: revert {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND &kp Z>;
            label = "REVERT";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND &kp X>;
            label = "CUT";
        };

        hard_refresh: hard_refresh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_SHIFT &kp F5>;
            label = "HARD_REFRESH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESCAPE       &td_shift_1  &td_shift_2    &td_shift_3        &td_shift_4      &td_shift_5    &kp UP_ARROW     &td_shift_6  &td_shift_7       &td_shift_8   &td_shift_9   &td_shift_0  &td_backspace
&kp TAB          &kp Q        &kp W          &kp E              &kp R            &kp T          &kp DOWN_ARROW   &kp Y        &kp U             &kp I         &kp O         &kp P        &kp BSLH
&kp CAPS         &kp A        &hml LCTRL S   &hml LEFT_ALT D    &hml LEFT_GUI F  &kp G          &kp LEFT_ARROW   &kp H        &hmr RIGHT_GUI J  &hmr RCTRL K  &hmr RCTRL L  &kp SEMI     &kp APOS
&OSM LEFT_SHIFT  &kp Z        &kp X          &kp C              &kp V            &kp B          &kp RIGHT_ARROW  &kp N        &kp M             &kp COMMA     &kp DOT       &kp FSLH     &kp RET
&kp C_MUTE       &OSM LCTRL   &OSM LEFT_ALT  &OSM LEFT_COMMAND  &mo 0            &kp SPACE      &kp ENTER        &kp SPACE    &kp B             &mo 1         &mo 1         &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp F11  &kp F12  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp F7   &kp F8   &kp F9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp F4   &kp F5   &kp F6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp F1   &kp F2   &kp F3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans   &trans   &trans  &trans
            >;
        };
    };
};
